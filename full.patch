--- ./fablab-google-assistant1.py	2017/11/21 13:39:50	1.1
+++ ./fablab-google-assistant1.py	2017/11/23 16:56:19	2.8
@@ -27,6 +30,38 @@
 from google.assistant.library.event import EventType
 from google.assistant.library.file_helpers import existing_file
 
+import subprocess           # コマンドを実行するためのライブラリ
+import RPi.GPIO as GPIO     # GPIOライブラリ
+
+# 音源データ
+SOUND_DIR='/home/ytani/sound'
+SOUND_ACK = [
+        SOUND_DIR+'/computerbeep_43.mp3',
+        SOUND_DIR+'/computerbeep_58.mp3',
+        SOUND_DIR+'/computerbeep_12.mp3']
+
+# GPIOに関する定数(ピン番号など)
+PIN_LED = 17                # LEDのピン番号(BCM)
+PIN_BUTTON = 27             # ボタンのピン番号(BCM)
+BOUNCE_MSEC = 500           # チャタリング防止用インターバル
+
+# ボタンを押されたときの処理(割り込みハンドラ)
+def procButton(pin):
+    print('*> procButton',(pin),': start')
+    if pin == PIN_BUTTON:
+        if GPIO.input(pin) == GPIO.HIGH:
+            print('*** Push:', pin)
+            assistant.start_conversation()
+        else: # GPIO.LOW
+            print('*** Release:', pin)
+            assistant.stop_conversation()
+    print('*< procButton',(pin),': end')
+
+# 確認音の再生
+def play_ack(num):
+    cmd = ['cvlc', '-q', '--play-and-exit', SOUND_ACK[num]]
+    proc = subprocess.call(cmd)
+    print('* play_ack(', num, '):', SOUND_ACK[num])
 
 def process_event(event):
     """Pretty prints events.
@@ -37,17 +72,47 @@
     Args:
         event(event.Event): The current event to process.
     """
+
+    if event.type == EventType.ON_START_FINISHED:
+        play_ack(0)
+
     if event.type == EventType.ON_CONVERSATION_TURN_STARTED:
+        play_ack(1)
         print()
 
+    if event.type == EventType.ON_END_OF_UTTERANCE:
+        play_ack(2)
+
+    if event.type == EventType.ON_RECOGNIZING_SPEECH_FINISHED:
+        speech_str = event.args['text']             # 認識した文章を取り出す
+        # 文章を解析してLEDのON/OFF
+        if 'light' in speech_str:
+            if 'on' in speech_str:
+                GPIO.output(PIN_LED, GPIO.HIGH)     # LED ON
+            elif 'off' in speech_str:
+                GPIO.output(PIN_LED, GPIO.LOW)      # LED OFF
+
     print(event)
 
     if (event.type == EventType.ON_CONVERSATION_TURN_FINISHED and
             event.args and not event.args['with_follow_on_turn']):
+        if GPIO.input(PIN_BUTTON) == GPIO.HIGH:
+            assistant.start_conversation()
+        else:
+            play_ack(0)
         print()
 
 
 def main():
+    global assistant                                            # assistantをグローバル変数にする
+
+    # GPIOの初期化
+    GPIO.setmode(GPIO.BCM)                                      # ピンのナンバリング方法の設定
+    GPIO.setup(PIN_LED, GPIO.OUT)                               # PIN_LEDを出力に設定
+    GPIO.setup(PIN_BUTTON, GPIO.IN, GPIO.PUD_DOWN)              # PIN_BUTTONを入力に設定
+    GPIO.add_event_detect(PIN_BUTTON, GPIO.BOTH,                # 割り込みコールバックの登録 
+            callback=procButton, bouncetime=BOUNCE_MSEC)
+
     parser = argparse.ArgumentParser(
         formatter_class=argparse.RawTextHelpFormatter)
     parser.add_argument('--credentials', type=existing_file,
@@ -69,4 +134,10 @@
 
 
 if __name__ == '__main__':
-    main()
+    try:
+        main()
+    except KeyboardInterrupt:
+        print('Ctrl-C')
+    finally:
+        print('GPIO.cleanup()')
+        GPIO.cleanup()              # 重要：GPIOの終了処理
